# Raspberry Pi Cluster Architecture (Kubernetes)

## Step#0 - Prerequisites üî∞
---
Download the latest Raspbian operating system image [here](https://www.raspberrypi.org/downloads/raspbian/). The client require desktop version while boards that are part of the Kubernetes cluster require the light version. 

### Initial configuration üî®

* access to the configuration panel by using : 
```
sudo raspi-config
```

* change default raspberry password for user "pi"
* change hostname
* enable ssh

### Wi-Fi ‚õî
If needed, a Wi-Fi connection can be configured. However, it is highly recommended for each raspberry pi that is a part of the Kubernetes cluster to stay in a local network environment. 

* edit configuration file :
```
sudo nano /etc/wpa_supplicant/wpa_supplicant.conf
```

* set following configuration : 
```
network={
    ssid="your_ssid_here"
    scan_ssid=1
    psk="your_password_here"
}
```

* reconfigure the interface with : 
```
sudo wpa_cli -i wlan0 reconfigure 
```
_The output of the command should be **OK**_.

### Updates ‚åö

```
sudo apt-get update && sudo apt-get dist-upgrade -y
```

## Step#1 - Disable swap üö´
***
‚ùå **_The client device does not require swap to be disabled_**.

‚úî **_Each node of the Kubernetes cluster including master one require swap to be disabled._**
***
``` 
sudo dphys-swapfile swapoff
sudo dphys-swapfile uninstall
sudo update-rc.d dphys-swapfile remove
``` 
* edit configuration file : 
```
sudo nano /boot/cmdline.txt
```
* add following text at the end of the existing linge without create any new line : 
```
cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory
```
* reboot 
```
sudo reboot
``` 

## Step#2 - Install Docker üê≥
***
‚ùå **_The client device does not require docker to be installed._**

‚úî **_Each node of the Kubernetes cluster including master one require Docker to be installed._**
***
```
curl -sSL get.docker.com | sh
sudo usermod pi -aG docker 
newgrp docker
```

## Step#3 - Install Kubernetes ‚èπ
***
‚ùå **_The client device does not require kubernetes to be installed._**

‚úî **_Each node of the Kubernetes cluster including master one require Kunernetes to be installed._**
***

* add required repo and install ```kubeadm``` : 

```
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add - 

echo "deb http://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list 

sudo apt-get update -q

sudo apt-get install -qy kubeadm
```

***
**‚ö† _Until contrary notice, next procedures have to be executed on master device of Kubernetes cluster ONLY_**
*** 
  * pull the requisites Docker images for Kubernetes master : 
    ```
    sudo kubeadm config images pull -v3
    ```

  * initialize master with infinite token _(not safe for production)_:
    
    ```
    sudo kubeadm init --token-ttl=0 --pod-network-cidr=10.244.0.0/16
    ```

    ***
    **‚ö† At this stage, do not forget to save somewhere the command required for nodes to join the cluster.**
    ***
  * save admin configuration of the Kubernetes cluster locally : 
    ```
    mkdir -p $HOME/.kube
    sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
    sudo chown $(id -u):$(id -g) $HOME/.kube/config
    ``` 

  * install Flannel network driver :
    ```
    kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/a70459be0084506e4ec919aa1c114638878db11b/Documentation/kube-flannel.yml

    ```
***
**‚ö† _Now, on each node including the master one_**
*** 
```
sudo sysctl net.bridge.bridge-nf-call-iptables=1
```
***
**‚ö† _Finally, on each node except the master one_**
*** 
```
kubeadm join <@IP_of_master_node>:6443 --token <generated_token> --discovery-token-ca-cert-hash <generated_hash>
```

if you want to add a node later, run following command on your master one : 
```
sudo kubeadm token create --print-join-command 
```

## Step#4 - Overclocking üöÄ (optionnal)
**‚ö† Overclocking Raspberry pis can cause hardware damages. Do it at your own risk.**
***
**‚ö† _Should be safe for every raspberry but seems to cause issues with master node._**
***
* edit configuration file :
```
sudo nano /boot/config.txt 
```

* set the following configuration : 
```
gpu_mem=400
arm_freq=1350
over_voltage=5
sdram_freq=500
core_freq=500
gpu_freq=400
```
* reboot 
```
sudo reboot
``` 

### Enable ZRAM
***
‚ùå **_Each node of the Kubernetes cluster including master one do not require ZRAM to be enabled._**

‚úî _Only usefull for client raspberry optimization._
***
_A future part describes how to disable swap on board that are part of the cluster._

* create the script : 
```
sudo nano /usr/bin/zram.sh
```
* insert following content : 
```
#!/bin/bash
cores=$(nproc --all)
modprobe zram num_devices=$cores

swapoff -a

totalmem=`free | grep -e "^Mem:" | awk '{print $2}'`
mem=$(( ($totalmem / $cores)* 1024 ))

core=0
while [ $core -lt $cores ]; do
  echo $mem > /sys/block/zram$core/disksize
  mkswap /dev/zram$core
  swapon -p 5 /dev/zram$core
  let core=core+1
done
```
* make it executable : 
```
sudo chmod +x /usr/bin/zram.sh
```
* run the script automatically after boot by editing file : 
```
sudo nano /etc/rc.local
```
* insert the following command before ```exit 0``` :
```
/usr/bin/zram.sh $
```
***
Below is WiP
***
## Setup Kubernetes dashboard
* install arm version of the dashboard : 
```
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard-arm.yaml
```

* download Cerbot :
```
wget https://dl.eff.org/certbot-auto
```
* make it executable : 
```
sudo chmod a+x certbot-auto
```
* run :
```
./certbot-auto certonly
``